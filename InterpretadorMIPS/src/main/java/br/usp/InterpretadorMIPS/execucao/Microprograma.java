package br.usp.InterpretadorMIPS.execucao;

public class Microprograma {
	
	/*
	 * BUSCA
	 * 
	 * PC  > MAR E PC > ULA
	 * MAR > MEM E AC > PC
	 * MEM > MBR
	 * MBR > IR + CONDI��O JUMP 
	 *	  
	 * LI $S0 CONSTANTE
	 * 
	 * IR2 -> $S0
	 * 
	 * LW $s0 CONSTANTE : OFFSET($S0) --> $S0
	 * 
	 * IR2 > MAR
	 * MAR > MEM RD E AV
	 * MEM > MBR
	 * MBR > $S0
	 * 
	 * SW $s0 CONSTANTE : $S0 --> OFFSET($S0)
	 * 
	 * IR2 > MAR 
	 * MAR > MEM & $S0 -> MBR RD E AV
	 * MBR > MEM WT
	 * 
	 * 
	 * MOVE $S0 $S1
	 * 
	 * $S1 > $S0
	 * 
	 * 
	 * ADD $S0 $S1, $S2
	 * 
	 * $S2 > X
	 * $S1 > ULA
	 * AC  > $S0
	 * 
	 * ADD $S0 $S1, CONSTANTE
	 * 
	 * $S2 > X
	 * IR3 > ULA
	 * AC  > $S0
	 * 
	 * 
	 * SUB $S0 $S1, $S2
	 * 
	 * $S2 > X
	 * $S1 > ULA
	 * AC  > $S0
	 * 
	 * SUB $S0 $S1, CONSTANTE
	 * 
	 * $S2 > X
	 * IR3 > ULA
	 * AC  > $S0
	 * 
	 * 
	 * BEQ $S0 $S1, CT
	 * 
	 * $S2 > X
	 * $S1 > ULA
	 * TESTA
	 * IR3 > PC
	 * 
	 * 
	 * BNE $S0 $S1, CT
	 * 
	 * $S2 > X
	 * $S1 > ULA
	 * TESTA
	 * IR3 > PC
	 * 
	 * J CONSTANTE
	 * 
	 * IR1 > PC
	 * 
	 * 
	 * SLT $S0 $S1, $S2 ---> S1 < S2 = 1
	 * 
	 * $S2 > X
	 * $S1 > ULA
	 * AC > $S0
	 * 
	 * SE A CONDI��O DO JUMP FOR FALSA
	 * 
	 * PC > ULA
	 * AC > PC
	 * 
	 * 
	 * 
		 * "IR2 > X",
	"RD > ULA",
	"AC > MAR",
	"MAR > MEM�RIA READ E AV",
	"MEM�RIA > MBR",
	"MBR > RR",

	"IR2 > X",
	"RD > ULA",
	"AC > MAR",
	"MAR > MEM�RIA READ E AV & RD > MBR",
	"MBR > MEM�RIA WT"

	 * 
	 * 
	 * 
	 */
	private static String[] codigos = {
			
  // 1234567890123456789012345678deciOPCrwajmendere
	"0110000000000010000000000000000000100000000000", //0
	"1000000000000100000000010010000000010100000000",
	"0000000000000000000000000101000000000000000000",
	"0000100000000000000000100000000000000000000000",
	"0000000000000000000000000000100000000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000000000100000000000100000011000000", //5
  // 1234567890123456789012345678deciOPCrwajmendere
	"0010000000000000000100000000000000000000000000", //6
	"0000000000000000000000010010000000010100000000",
	"0000000000000000000000000101000000000000000000",
	"0000100000000000000000001000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0010000000000000000100000000000000000000000000", //10	
	"0001000000000000000000010010010100010100000000",
	"0000000000000000000000001010000000001011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000000000000000000001000000011000000", //13
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //14
	"0000000000000010000000000000011101000000000000",		
	"0000000000000100000000000000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //17
	"0000000000000010000001000000000001000000000000",
	"0000000000000100000000000000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //20		
	"0000000000000010000000000000011101100000000000",
	"0000000000000100000000000000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //23
	"0000000000000010000001000000000001100000000000",
	"0000000000000100000000000000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //26
	"0000000000000010000001000000010101100000000000",
	"0000000000000000000000000000000000000001100110",
	"1000000000000000000001000000000000000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //30
	"0000000000000010000001000000010101100000000000",
	"0000000000000000000000000000000000000010100110",
	"1000000000000000000001000000000000000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"1000000000000000010000000000000000000011000000", //34
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000000000000011000000000000000", //35
	"0000000000000010000000000000011110000000000000",
	"0000000000000100000000000000000100000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0100000000000000000000000000000000100000000000", //38
	"1000000000000100000000000000000000000011000000",
  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000100000000000000000000000000", //40 SW registrador, offset(registrador)
	"0000000000000010000001000000000001000000000000",
	"0010000000000100000000000000000000000000000000",
	"0001000000000000000000010010010100010100000000",
	"0000000000000000000000001010000000001011000000",

  // 1234567890123456789012345678deciOPCrwajmendere
	"0000000000000001000100000000000000000000000000", //45 LW registrador, offset(registrador)
	"0000000000000010000001000000000001000000000000",
	"0010000000000100000000000000000000000000000000",	
	"0000000000000000000000010010000000010100000000",
	"0000000000000000000000000101000000000000000000",
	"0000100000000000000000000000000100000011000000"
	};
	
	
	
	/*	
	 *  0					: 000
	 *  2 - 1�				: 001
	 *  2 - 1� e 2�			: 010
	 *  3 - 1� e 2� 		: 011	
	 *  3 - 1�, 2� e 3� 	: 100
	 *  2 - 1� SA�DA  		: 101 !!!!!!!!!!!!!!!!!!!!!!!!
	 *  2 - 2� SA�DA		: 110
	 *  2 - 3� SA�DA		: 111
	 *  OPCODE				: 1000
	 *  
	 * 
	 */
	
	/*
	 * 
	 * N/A 	: 00
	 * BEQ	: 01
	 * BNE	: 10
	 * J	: 11
	 * 
	 */
	
	/*
	 * 
	 * N/A: 000
	 * INC: 001
	 * ADD: 010
	 * SUB: 011
	 * SNL: 111
	 */
	
	/*
	 *  |1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|D|E|C|O|P|C|R|W|A|J|M|1|2|3|4|5|6|
	 *  
	 * 
	 */
	
	public static String obterInstrucao(int indice) {
		String codigo = codigos[indice];
		return codigo;
	}
	
	
}
